// Generated by CoffeeScript 1.6.3
/*
 Copyright (c) 2014 Takeshi Arabiki
 licensed under the MIT license (http://opensource.org/licenses/MIT)
 URL: https://github.com/abicky/query-matcher-js
*/


(function() {
  var root,
    __slice = [].slice;

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.QueryMatcher = (function() {
    var _match;

    function QueryMatcher(query) {
      var afterOrWord, beforeOrWord, i, requiredWords, word, words, _i, _j, _len, _ref, _ref1, _ref2;
      this.requiredWords = [];
      this.optionalWords = [];
      _ref = (" " + query + " ").split(/\s+OR\s+/);
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        words = _ref[i];
        _ref1 = words.split(/\s+/), afterOrWord = _ref1[0], requiredWords = 3 <= _ref1.length ? __slice.call(_ref1, 1, _j = _ref1.length - 1) : (_j = 1, []), beforeOrWord = _ref1[_j++];
        (_ref2 = this.requiredWords).push.apply(_ref2, (function() {
          var _k, _len1, _results;
          _results = [];
          for (_k = 0, _len1 = requiredWords.length; _k < _len1; _k++) {
            word = requiredWords[_k];
            if (word !== '-') {
              _results.push(word);
            }
          }
          return _results;
        })());
        if (!(afterOrWord === '' && i === 0)) {
          this.optionalWords.push(afterOrWord);
        }
        if (beforeOrWord) {
          this.optionalWords.push(beforeOrWord);
        }
      }
    }

    QueryMatcher.prototype.match = function(str) {
      var optionalWord, requiredWord, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.requiredWords;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        requiredWord = _ref[_i];
        if (requiredWord.substring(0, 1) !== '-') {
          if (!_match(requiredWord, str)) {
            return false;
          }
        } else {
          if (_match(requiredWord.substring(1), str)) {
            return false;
          }
        }
      }
      if (this.optionalWords.length === 0) {
        return true;
      }
      _ref1 = this.optionalWords;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        optionalWord = _ref1[_j];
        if (optionalWord.substring(0, 1) !== '-') {
          if (_match(optionalWord, str)) {
            return true;
          }
        } else {
          if (!_match(optionalWord.substring(1), str)) {
            return true;
          }
        }
      }
      return false;
    };

    _match = function(searchWord, targetString) {
      var pos;
      pos = targetString.indexOf(searchWord);
      if (pos !== -1) {
        return true;
      }
      return targetString.toLowerCase().indexOf(searchWord) !== -1;
    };

    return QueryMatcher;

  })();

}).call(this);
